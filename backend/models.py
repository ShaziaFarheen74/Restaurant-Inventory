import cx_Oracle
from datetime import datetime

dsn = cx_Oracle.makedsn("localhost", 1521, sid="xe")
connection = cx_Oracle.connect("restaurant", "restaurant", dsn)  

def create_user_table():
    cursor = connection.cursor()
    cursor.execute("SELECT COUNT(*) FROM all_tables WHERE table_name = 'USERS'")
    if cursor.fetchone()[0] == 0:
        try:
            cursor.execute("""
                CREATE TABLE users (
                    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    username VARCHAR2(100) NOT NULL,
                    password VARCHAR2(255) NOT NULL,
                    role VARCHAR2(50) NOT NULL, -- (Owner, Manager)
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            connection.commit()
            print("Users table created successfully")
        except Exception as e:
            print(f"Error creating users table: {e}")
    else:
        print("Users table already exists.")

def create_food_items_table():
    cursor = connection.cursor()
    cursor.execute("SELECT COUNT(*) FROM all_tables WHERE table_name = 'FOOD_ITEMS'")
    if cursor.fetchone()[0] == 0:
        try:
            cursor.execute("""
                CREATE TABLE food_items (
                    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    name VARCHAR2(100) NOT NULL,
                    quantity NUMBER NOT NULL, 
                    unit VARCHAR2(50),
                    created_by NUMBER, -- References restaurant owner (foreign key)
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    CONSTRAINT fk_owner FOREIGN KEY (created_by) REFERENCES users(id)
                )
            """)
            connection.commit()
            print("Food items table created successfully")
        except Exception as e:
            print(f"Error creating food items table: {e}")
    else:
        print("Food items table already exists.")

create_user_table()
create_food_items_table()

